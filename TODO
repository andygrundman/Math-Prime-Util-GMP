
- prime_count - needs the pc(#) option as well as pc(#,#)

- Consider adding Lehmer's method for prime count.  The only use I can really
  think of would be 32-bit machines.  I worry that the overhead of GMP would
  kill us, and some method using __uint64s, or even Math::Int64 would be
  faster.

- nth_prime

- GMP SQUFOF could use a better implementation, though low priority since it
  just isn't going to be the right algorithm for numbers > 2^64.  Mainly what
  it needs is to pay attention to the rounds argument.  Perhaps race.

- Add Riemann R function

- Tune and improve SIMPQS for our uses.  Check FLINT 2.3 for improvements.

- Write our own QS.

- The statics in ecm and QS won't play well with threading.

- ECPP: Perhaps more HCPs/WCPs could be loaded if needed?

- ECPP: backtracking.

- Functions:  is_aks_prime, is_ecpp_prime, is_nminus1_prime (BLS75).
  Have is_provable_prime select one.

- Tests for ECPP.

- Add EAS for big numbers.  When we have a large (say > 300 digits) number in
  ECPP, instead of immediately processing a factored q, keep running through
  stage 1 to find all other D/m/q sets that will work.  Choose the smallest q.
  This trades off the extra factoring time (which is fast in stage 1) for the
  gain of possibly making the next number smaller, which if done will usually
  be a big payoff.

- Primality proof text should be allocated / reallocated by the proof code,
  instead of our making a giant max size guess in the caller.
